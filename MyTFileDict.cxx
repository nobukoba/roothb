//
// File generated by rootcint at Mon Apr 23 03:43:14 2018

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MyTFileDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MyTFileDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MyTFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MyTFile(void *p);
   static void deleteArray_MyTFile(void *p);
   static void destruct_MyTFile(void *p);
   static void streamer_MyTFile(TBuffer &buf, void *obj);
   static void reset_MyTFile(void *obj, TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTFile*)
   {
      ::MyTFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTFile", ::MyTFile::Class_Version(), "./MyTFile.h", 8,
                  typeid(::MyTFile), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MyTFile::Dictionary, isa_proxy, 0,
                  sizeof(::MyTFile) );
      instance.SetDelete(&delete_MyTFile);
      instance.SetDeleteArray(&deleteArray_MyTFile);
      instance.SetDestructor(&destruct_MyTFile);
      instance.SetStreamerFunc(&streamer_MyTFile);
      instance.SetResetAfterMerge(&reset_MyTFile);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MyTFile*)
   {
      return GenerateInitInstanceLocal((::MyTFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MyTFile::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MyTFile::Class_Name()
{
   return "MyTFile";
}

//______________________________________________________________________________
const char *MyTFile::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MyTFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTFile::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MyTFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTFile::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MyTFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTFile::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MyTFile*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MyTFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTFile.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TFile::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, MyTFile::IsA());
   } else {
      R__c = R__b.WriteVersion(MyTFile::IsA(), kTRUE);
      TFile::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MyTFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTFile.
      TClass *R__cl = ::MyTFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      TFile::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MyTFile(void *p) {
      delete ((::MyTFile*)p);
   }
   static void deleteArray_MyTFile(void *p) {
      delete [] ((::MyTFile*)p);
   }
   static void destruct_MyTFile(void *p) {
      typedef ::MyTFile current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MyTFile(TBuffer &buf, void *obj) {
      ((::MyTFile*)obj)->::MyTFile::Streamer(buf);
   }
   // Wrapper around the Reset function.
   static void reset_MyTFile(void *obj,TFileMergeInfo *info) {
      ((::MyTFile*)obj)->ResetAfterMerge(info);
   }
} // end of namespace ROOTDict for class ::MyTFile

/********************************************************
* MyTFileDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMyTFileDict();

extern "C" void G__set_cpp_environmentMyTFileDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MyTFile.h");
  G__cpp_reset_tagtableMyTFileDict();
}
#include <new>
extern "C" int G__cpp_dllrevMyTFileDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyTFile */
static int G__MyTFileDict_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MyTFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) MyTFile(
(const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTFile::foption((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTFile::extension_checker((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTFile::GetShmTimer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyTFileDict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTFile G__TMyTFile;
static int G__MyTFileDict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTFile*) (soff+(sizeof(MyTFile)*i)))->~G__TMyTFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTFile*) (soff))->~G__TMyTFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyTFile */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMyTFileDict {
 public:
  G__Sizep2memfuncMyTFileDict(): p(&G__Sizep2memfuncMyTFileDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMyTFileDict::*p)();
};

size_t G__get_sizep2memfuncMyTFileDict()
{
  G__Sizep2memfuncMyTFileDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMyTFileDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile))) {
     MyTFile *G__Lderived;
     G__Lderived=(MyTFile*)0x1000;
     {
       TFile *G__Lpbase=(TFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile),G__get_linked_tagnum(&G__MyTFileDictLN_TFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TDirectoryFile *G__Lpbase=(TDirectoryFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile),G__get_linked_tagnum(&G__MyTFileDictLN_TDirectoryFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TDirectory *G__Lpbase=(TDirectory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile),G__get_linked_tagnum(&G__MyTFileDictLN_TDirectory),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile),G__get_linked_tagnum(&G__MyTFileDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile),G__get_linked_tagnum(&G__MyTFileDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMyTFileDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyTFileDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyTFileDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyTFileDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyTFileDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyTFile */
static void G__setup_memvarMyTFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile));
   { MyTFile *p; p=(MyTFile*)0x1000; if (p) { }
   G__memvar_setup((void*)(&MyTFile::shm_timer),85,0,0,G__get_linked_tagnum(&G__MyTFileDictLN_TTimer),-1,-2,1,"shm_timer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyTFileDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMyTFileDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyTFile(void) {
   /* MyTFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile));
   G__memfunc_setup("MyTFile",666,G__MyTFileDict_239_0_1, 105, G__get_linked_tagnum(&G__MyTFileDictLN_MyTFile), -1, 0, 4, 1, 1, 0, 
"C - - 10 - - C - 'Option_t' 10 - - "
"C - - 10 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("foption",767,G__MyTFileDict_239_0_2, 67, -1, G__defined_typename("Option_t"), 0, 2, 3, 1, 0, 
"C - - 10 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) G__func2void( (Option_t* (*)(const char*, Option_t*))(&MyTFile::foption) ), 0);
   G__memfunc_setup("extension_checker",1809,G__MyTFileDict_239_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - - 10 - -", (char*)NULL, (void*) G__func2void( (Int_t (*)(const char*))(&MyTFile::extension_checker) ), 0);
   G__memfunc_setup("GetShmTimer",1097,G__MyTFileDict_239_0_4, 85, G__get_linked_tagnum(&G__MyTFileDictLN_TTimer), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TTimer* (*)())(&MyTFile::GetShmTimer) ), 0);
   G__memfunc_setup("Class",502,G__MyTFileDict_239_0_5, 85, G__get_linked_tagnum(&G__MyTFileDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyTFileDict_239_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyTFileDict_239_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyTFileDict_239_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyTFileDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyTFileDict_239_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyTFileDict_239_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyTFileDict_239_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyTFileDict_239_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyTFileDict_239_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MyTFile", 792, G__MyTFileDict_239_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMyTFileDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMyTFileDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMyTFileDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MyTFileDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MyTFileDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_TDirectoryFile = { "TDirectoryFile" , 99 , -1 };
G__linked_taginfo G__MyTFileDictLN_MyTFile = { "MyTFile" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMyTFileDict() {
  G__MyTFileDictLN_TClass.tagnum = -1 ;
  G__MyTFileDictLN_TBuffer.tagnum = -1 ;
  G__MyTFileDictLN_TDirectory.tagnum = -1 ;
  G__MyTFileDictLN_TMemberInspector.tagnum = -1 ;
  G__MyTFileDictLN_TObject.tagnum = -1 ;
  G__MyTFileDictLN_TNamed.tagnum = -1 ;
  G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MyTFileDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyTFileDictLN_TTimer.tagnum = -1 ;
  G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MyTFileDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MyTFileDictLN_TFile.tagnum = -1 ;
  G__MyTFileDictLN_TDirectoryFile.tagnum = -1 ;
  G__MyTFileDictLN_MyTFile.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMyTFileDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TTimer);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__MyTFileDictLN_TDirectoryFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyTFileDictLN_MyTFile),sizeof(MyTFile),-1,62464,(char*)NULL,G__setup_memvarMyTFile,G__setup_memfuncMyTFile);
}
extern "C" void G__cpp_setupMyTFileDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMyTFileDict()");
  G__set_cpp_environmentMyTFileDict();
  G__cpp_setup_tagtableMyTFileDict();

  G__cpp_setup_inheritanceMyTFileDict();

  G__cpp_setup_typetableMyTFileDict();

  G__cpp_setup_memvarMyTFileDict();

  G__cpp_setup_memfuncMyTFileDict();
  G__cpp_setup_globalMyTFileDict();
  G__cpp_setup_funcMyTFileDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMyTFileDict();
  return;
}
class G__cpp_setup_initMyTFileDict {
  public:
    G__cpp_setup_initMyTFileDict() { G__add_setup_func("MyTFileDict",(G__incsetup)(&G__cpp_setupMyTFileDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMyTFileDict() { G__remove_setup_func("MyTFileDict"); }
};
G__cpp_setup_initMyTFileDict G__cpp_setup_initializerMyTFileDict;

